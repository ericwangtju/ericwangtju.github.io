{"meta":{"title":"王轶涵","subtitle":null,"description":"每个人都会累，没人能为你承担所有的伤悲和疲惫，所以人总有那么一段时间要学会自己长大。","author":"Eric Wang","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"解决 xcode 报compress PNG files error错误","slug":"解决-xcode-报compress-PNG-files-error错误","date":"2018-11-05T03:09:47.000Z","updated":"2018-11-05T03:11:06.443Z","comments":true,"path":"2018/11/05/解决-xcode-报compress-PNG-files-error错误/","link":"","permalink":"http://yoursite.com/2018/11/05/解决-xcode-报compress-PNG-files-error错误/","excerpt":"","text":"出现这个错误提示,解决办法:在build setting中搜png到,然后两个选项修改BOOL值为NO,即可运行","categories":[{"name":"iOS开发","slug":"iOS开发","permalink":"http://yoursite.com/categories/iOS开发/"}],"tags":[{"name":"iOS 开发中遇到的问题","slug":"iOS-开发中遇到的问题","permalink":"http://yoursite.com/tags/iOS-开发中遇到的问题/"}]},{"title":"Xcode 10 Multiple commands produce 报错解决","slug":"Xcode-10-Multiple-commands-produce-报错解决","date":"2018-11-05T02:48:51.000Z","updated":"2018-11-05T03:05:57.133Z","comments":true,"path":"2018/11/05/Xcode-10-Multiple-commands-produce-报错解决/","link":"","permalink":"http://yoursite.com/2018/11/05/Xcode-10-Multiple-commands-produce-报错解决/","excerpt":"","text":"用Xcode10跑之前的项目，也就报了一种类型的错误：Multiple commands produce。这个的原因是项目中使用第三方库，里面有README.md，README.txt，LICENSE，Info.plist，图片文件之类的，而且是不止一个库中有，重复的这些文件，导致的报错。解决方案（如图）：找到对应得第三方库的 target &gt; Build phase &gt; Copy Bundle Resource/Compile Sources，删掉第三方库中重复的上述文件，然后再 clean 一下基本可以解决问题。如果还报错的话，可以将重新添加一下到compile source 文件中。还有时候需要修改xcode的配置暂时解决了编译报错的问题。 xcode–file–Workspace Settings–Build System–legacy Build System","categories":[{"name":"iOS开发","slug":"iOS开发","permalink":"http://yoursite.com/categories/iOS开发/"}],"tags":[{"name":"iOS 开发中遇到的问题","slug":"iOS-开发中遇到的问题","permalink":"http://yoursite.com/tags/iOS-开发中遇到的问题/"}]},{"title":"当提示No such module XXX的解决方法","slug":"当提示No-such-module-XXX的解决方法","date":"2018-10-17T13:30:34.000Z","updated":"2018-11-05T02:53:44.891Z","comments":true,"path":"2018/10/17/当提示No-such-module-XXX的解决方法/","link":"","permalink":"http://yoursite.com/2018/10/17/当提示No-such-module-XXX的解决方法/","excerpt":"","text":"最近升级了 xcode10,拿出了以前的 swift 项目跑了一下,发现所有的使用 pod 管理的库都会提示”No such module XXX”的错误.解决办法是:在项目的 build phases 中的 link binary with libraries 将 pods_项目名字.framework 删除掉,然后再重新添加","categories":[{"name":"iOS开发","slug":"iOS开发","permalink":"http://yoursite.com/categories/iOS开发/"}],"tags":[{"name":"iOS 开发中遇到的问题","slug":"iOS-开发中遇到的问题","permalink":"http://yoursite.com/tags/iOS-开发中遇到的问题/"}]},{"title":"iOS Coding Style Guide","slug":"iOS-Coding-Style-Guide","date":"2017-11-02T05:17:13.000Z","updated":"2018-11-05T02:53:29.701Z","comments":true,"path":"2017/11/02/iOS-Coding-Style-Guide/","link":"","permalink":"http://yoursite.com/2017/11/02/iOS-Coding-Style-Guide/","excerpt":"","text":"语言命名使用美式英语,注释可以使用中文 推荐写法:1UIColor *myColor = [UIColor whiteColor]; 不推荐写法:1UIColor *myColour = [UIColor whiteColour]; 代码结构使用 #pragma mark -将类中的方法进行分组123456789101112131415161718192021222324252627282930313233#pragma mark - Private Functions//code...//上空一行//下空两行#pragma mark - Action functions//code...//上空一行//下空两行#pragma mark - Request functions//code...//上空一行//下空两行#pragma mark - xxxDataSource//code...//上空一行//下空两行#pragma mark - xxxDelegate//code...//上空一行//下空两行 间距 代码缩进为2.在xcode的偏好设置中设置，不要使用 tab 键来进行缩进 方法的大括号(包括if/else/switch/while )需要和声明在同一行,而不是重新起一行，但是在新的一行中关闭 推荐写法:12345if (user.isHappy)&#123; //Do something&#125; else &#123; //Do something else&#125; 不推荐写法:1234567if (user.isHappy)&#123; //Do something&#125;else &#123; //Do something else&#125; 每一个方法之间空一行作为间隔 应该避免冒号分隔的方法的对齐方式 推荐写法 123456// blocks are easily readable[UIView animateWithDuration:1.0 animations:^&#123; // something&#125; completion:^(BOOL finished) &#123; // something&#125;]; 不推荐写法: 12345678// colon-aligning makes the block indentation hard to read[UIView animateWithDuration:1.0 animations:^&#123; // something &#125; completion:^(BOOL finished) &#123; // something &#125;]; 注释注释是用来解释这么做的原因.任何的注释必须是最新的.没用的注释请删除避免大段的注释.代码尽量写的具有解释性 方法注释使用如下格式123456/**方法描述@param 参数1描述@param 参数2描述 */ 命名推荐使用长的,可描述性的方法名和变量名称给一个对象命名时建议采用修饰+类型的方式 推荐写法: 12UIButton *settingsButton;UILabel *titleLabel //表示标题的label, 是UILabel类型 不推荐写法: 1UIButton *setBut; 类名和常量名称前面使用两个或是三个字母的前缀,避免和系统的冲突.前缀使用大写常量的名称使用大驼峰命名法,为了易于阅读,需要在前缀上添加相关联的类名对于BOOL类型, 应加上is前缀, 比如- (BOOL)isEqualToString:(NSString *)aString 推荐写法: 1static NSTimeInterval const RWTTutorialViewControllerNavigationFadeAnimationDuration = 0.3; 不推荐写法: 1static NSTimeInterval const fadetime = 1.7; 属性的名称使用小驼峰命名法 推荐写法: 1@property (strong, nonatomic) NSString *descriptiveVariableName; 不推荐写法: 1id varnm; 下划线声明实例变量时必须采用 _ 下划线作为变量名前缀当使用的是属性,推荐使用self. ，本地的局部变量不要使用下划线 方法在方法名中,在(-/+)号之后有一个空格,参数之间需要添加一个空格使用小写字母开头，后面嵌套连接的字母使用大写开头在写Category Method的时候, 必须采用前缀名_ 后连接对应方法名的方式来进行添加，前缀名使用大写 在方法名中尽量不要使用and连接参数对于采取动作行为的方法,使用动词开头,但是不要直接使用 do或者does 推荐写法:1234- (void)setExampleText:(NSString *)text image:(UIImage *)image;- (void)sendAction:(SEL)aSelector to:(id)anObject forAllCells:(BOOL)flag;- (id)viewWithTag:(NSInteger)tag;- (instancetype)initWithWidth:(CGFloat)width height:(CGFloat)height; 不推荐写法: 12345-(void)setT:(NSString *)text i:(UIImage *)image;- (void)sendAction:(SEL)aSelector :(id)anObject :(BOOL)flag;- (id)taggedView:(NSInteger)tag;- (instancetype)initWithWidth:(CGFloat)width andHeight:(CGFloat)height;- (instancetype)initWith:(int)width and:(int)height; // Never do this. 变量变量的命名要尽量可以描述用途.除了在for循环中可以使用单字母的变量,其他情况不能使用单字母变量 推荐写法: 12345@interface RWTTutorial : NSObject@property (strong, nonatomic) NSString *tutorialName;@end 不推荐写法: 123@interface RWTTutorial : NSObject &#123; NSString *tutorialName;&#125; 属性修饰符在声明属性的时候,属性的修饰符优先显示内存管理类,然后是读写. 推荐写法: 12@property (weak, nonatomic) IBOutlet UIView *containerView;@property (strong, nonatomic) NSString *tutorialName; 不推荐写法: 12@property (nonatomic, weak) IBOutlet UIView *containerView;@property (nonatomic) NSString *tutorialName; 如果属性具有可变副本(例如NSString),属性应该使用copy替代strong 推荐写法: 1@property (copy, nonatomic) NSString *tutorialName; 不推荐写法: 1@property (strong, nonatomic) NSString *tutorialName; Block规范 调用block时需要对block判空。 注意block潜在的引用循环。 常量 常量使用static声明,尽量不使用#define 通知的名字和字典的key，应该使用字符串常量来定义 使用const关键字创建浮点型常量const float NSLightGray; 字符串常量应该在.h头文件中暴露给外部，而字符串常量真正的赋值是在.m文件中 推荐写法: 123static NSString * const RWTAboutViewControllerCompanyName = @\"MHP.com\";static CGFloat const RWTImageThumbnailHeight = 50.0; 不推荐写法: 123#define CompanyName @\"MHP.com\"#define thumbnailHeight 2 当使用到了通知的时候,需要将通知名称定义成常量,这样可以避免重复123extern NSString * const OCFooDidBecomeBarNotificationNSString * const OCFooDidBecomeBarNotification = @&quot;OCFooDidBecomeBarNotification&quot;; 枚举类型推荐使用Apple推荐写法推荐写法: 12345typedef NS_ENUM(NSInteger, RWTLeftMenuTopItemType) &#123; RWTLeftMenuTopItemMain, RWTLeftMenuTopItemShows, RWTLeftMenuTopItemSchedule&#125;; 可以在枚举值的后面赋值 123456typedef NS_ENUM(NSInteger, RWTGlobalConstants) &#123; RWTPinSizeMin = 1, RWTPinSizeMax = 5, RWTPinCountMin = 100, RWTPinCountMax = 500,&#125;; 避免使用旧式的k前缀写法不推荐写法: 1234enum GlobalConstants &#123; kMaxPinSize = 5, kMaxPinCount = 500,&#125;; Switch写法推荐写法: 12345678910111213141516switch (condition) &#123; case 1: // ... break; case 2: &#123; // ... // Multi-line example using braces break; &#125; case 3: // ... break; default: // ... break;&#125; 当需要使用穿透时候 12345678910switch (condition) &#123; case 1: // ** fall-through! ** case 2: // code executed for values 1 and 2 break; default: // ... break;&#125; 当switch使用的是枚举值,那么就不需要写default12345678910111213RWTLeftMenuTopItemType menuType = RWTLeftMenuTopItemMain;switch (menuType) &#123; case RWTLeftMenuTopItemMain: // ... break; case RWTLeftMenuTopItemShows: // ... break; case RWTLeftMenuTopItemSchedule: // ... break;&#125; BOOL类型Objective-C 使用 YES 和 NO. 因为 nil 解析成 NO 没有必要判断. 不要使用YES去比较 推荐写法: 12if (someObject) &#123;&#125;if (![anotherObject boolValue]) &#123;&#125; 不推荐写法: 1234if (someObject == nil) &#123;&#125;if ([anotherObject boolValue] == NO) &#123;&#125;if (isAwesome == YES) &#123;&#125; // Never do this.if (isAwesome == true) &#123;&#125; // Never do this. 如果一个bool属性是形容性的,那么需要在属性中添加getter=isXXXX1@property (assign, getter=isEditable) BOOL editable; 条件语句不要嵌套if语句，多个返回语句也是OK。当出现复杂的if条件的时候, 可以把它们分别提取出来赋值到BOOL变量上, 让逻辑更加清晰明了, 约定2个条件以上则需要将其单独提取出来推荐写法:123if (!error) &#123; return success;&#125; 不推荐写法:12if (error) return success; or 1if (!error) return success; 三目运算符对于添加判断,需要添加上括号 推荐写法:12345NSInteger value = 5;result = (value != 0) ? x : y;BOOL isHorizontal = YES;result = isHorizontal ? x : y; 不推荐写法:1result = a &gt; b ? x = c &gt; d ? c : d : y; Init方法Init方法应该遵循Apple生成代码模板的命名规则，返回值使用instancetype&#39;而不是id.dealloc 方法应该放在实现文件的最上面，并且刚好在 @synthesize 和 @dynamic 语句的后面。在任何类中，init 都应该直接放在 dealloc 方法的下面。 1234567- (instancetype)init &#123; self = [super init]; if (self) &#123; // ... &#125; return self;&#125; CGRect 函数当访问CGRect里的x, y, width, 或 height时，应该使用CGGeometry函数而不是直接通过结构体来访问 推荐写法:123456CGRect frame = self.view.frame;CGFloat x = CGRectGetMinX(frame);CGFloat y = CGRectGetMinY(frame);CGFloat width = CGRectGetWidth(frame);CGFloat height = CGRectGetHeight(frame);CGRect frame = CGRectMake(0.0, 0.0, width, height); 不推荐写法:123456CGRect frame = self.view.frame;CGFloat x = frame.origin.x;CGFloat y = frame.origin.y;CGFloat width = frame.size.width;CGFloat height = frame.size.height;CGRect frame = (CGRect)&#123; .origin = CGPointZero, .size = frame.size &#125;; 单例模式单例对象应该使用线程安全模式来创建共享实例。推荐写法:12345678910+ (instancetype)sharedInstance &#123; static id sharedInstance = nil; static dispatch_once_t onceToken; dispatch_once(&amp;onceToken, ^&#123; sharedInstance = [[self alloc] init]; &#125;); return sharedInstance;&#125; Delegate/protocol的书写 命名以触发消息的对象的类名开头，省略类名前缀并且首字母小写 如果调用某个方法是为了通知delegate某个事件”即将”发生或者”已经”发生，则请在方法名称中使用“will”或者“did”这样的助动词 如果调用某个方法是为了要求delegate代表其他对象执行某件事情，我们应该在方法中使用“should”这样的情态动词 调用delegate 的方法时需要进行判断 用optional修饰可以不实现的方法，用required修饰必须实现的方法 Notification 的书写 notification的命名使用全局的NSString字符串进行标识。命名方式如下：[类名] + [Did | Will] + [UniquePartOfName] + Notification 1234NSApplicationDidBecomeActiveNotificationNSWindowDidMiniaturizeNotificationNSTextViewDidChangeSelectionNotificationNSColorPanelColorDidChangeNotification object通常是指发出notification的对象，如果在发送notification的同时要传递一些额外的信息，请使用userInfo，而不是object。 如果某个通知是为了告知外界某个事件”即将”发生或者”已经”发生，则请在通知名称中使用“will”或者“did”这样的助动词 多用字面量语法,少用与之等价的语法推荐写法:1234NSArray *array = @[@\"123\", @\"456\"];NSDictionary *dictionary = @[@\"name\": @\"jersey\", @\"age\": @\"61\"];NSNumber *number = @18;NSString *string = array[0]; 文件引入方式 在 .h 文件中尽量使用 @class 声明文件, 直到 .m 文件中真正需要的时候在使用 @improt 进行引用 @improt 文件顺序: 可以先写引入系统文件, 依次到 Public.h 最后才到我们自己编写的文件。 检查文件,避免引入到没有使用到的文件,发现应及时清除。 可以采用以下的格式进行分割 12345678// Frameworks@import QuartzCore;// Models#import &quot;EWUser.h&quot;// Views#import &quot;EWButton.h&quot; 换行符一行很长的代码应该分成两行代码，下一行用两个空格隔开。一行代码最大宽度为80个字符 Xcode project项目文件夹为了避免文件杂乱，物理文件应该保持和 Xcode 项目文件同步。Xcode 创建的任何组（group）都必须在文件系统有相应的映射。为了更清晰，代码不仅应该按照类型进行分组，也可以根据功能进行分组。 图片资源项目中的图片一致存放到 Assets.xcassets 进行管理. 按模块划分进行管理的，将图片一致保存到原有的模块分组中去,然后每次不需要使用的图片,及时清除, 减少 App 体积。将公用的一些图片资源独立存放。 图片名称: 图片名称可以以模块作为首接 _ 连接其相应功能点。这样在以后查找起来也相对方便。可以根据模块_类别_功能_状态_@2x／@3x.png进行命名如: trade_result_fail 投资,结果页,状态。 discover_activity 发现,活动图片资源包的文件包命名规则是：项目名字＋切图＋作者名字＋日期。文件包要包括：image，效果图＋标注图，切图简单说明（word等文件）。文件包压缩采用.zip格式在image中切图文件和切图命名中：···不要出现大写，···不要有中文、特殊符号以及空格，···字母必须是小写字母，···同类切图大小一致（后续文章单独整理切图方法和常见问题） 三方库管理工具 使用 Cocoapods 统一对第三库进行管理, 建议定时更新到最新版本, 保持版本一致。 避免引入同样功能的第三方库 TODO当在开发某个功能中遇到一些疑难杂症的问题, 但是又由于时间紧急, 来不及把细节做到完美, 如果在不影响当前功能使用的情况下, 为了防止在后面的开发中遗忘掉, 我们必须要在相应的地方添加注释 然后以下面的格式, 接相关问题描述添加进来, 待后面有空闲时间之后回来进行修复完善。1// TODO: messge 其他需要注意的1. 向项目中添加第三方SDK时,只引入必要的文件.例如readme文件以及info.plist文件等不要引用 2. 尽量不要暴露mutable类型的对象在public interface, 建议在.h定义一个Inmutable类型的属性, 然后在.m的get函数里面返回一个内部定义的mutable变量 3. 避免出现魔鬼数字 4. 当发现实现某一方法需要传递的参数太多时, 就预示着你应该聚合成一个model类了 5. 类中使用了通知或是KVO时,注意移除监听 6. 在block中为避免使用weakSelf,还要使用strongSelf 7. NSArray, NSDictionary成员的判空保护.在addObject或insertObject到NSArray或者NSDictionary时最好加一下判空保护, 8. 在每次提交的之前进行检查,有没有warning,以及代码静态分析.例如在视图的生命周期的方法中经常忘记调用[super viewWillAppear.....].还有没有使用过的变量等问题 9. 关于页面布局的方式，对于单一简单的部分视图可以使用xib或是sb，控制器尽量不要使用sb进行构建 10. 如果想要获取window，不要使用view.window获取。请使用[[UIApplication sharedApplication] keyWindow] 11. 在使用到 UIScrollView，UITableView，UICollectionView 的 Class 中，需要在 dealloc 方法里手动的把对应的 delegate, dataSource 置为 nil 代码保护神//// oo0oo// o8888888o// 88” . “88// (| -_- |)// 0\\ = /0// /`—‘\\// .’ \\| |// ‘.// / \\||| : |||// \\// / ||||| -:- |||||- \\// | | \\\\ - /// | |// | \\| ‘’-–/‘’ |_/ |// \\ .-__ ‘-‘ _/-. /// _‘. .’ /–.–\\ . .&#39;___ // .&quot;&quot; &#39;&lt;.__&lt;|&gt;_/_.’ &gt;’ “”.// | | : - \\.;\\ _ /;./ - : | |// \\ \\ _. \\_ __\\ /__ _/ .- / /// =====-.____._ ___/.-`.-‘=====// `=—=’////// ~~~~~~~~~~~//// 佛祖保佑 永无BUG//////","categories":[{"name":"iOS开发","slug":"iOS开发","permalink":"http://yoursite.com/categories/iOS开发/"}],"tags":[{"name":"iOS 开发文档","slug":"iOS-开发文档","permalink":"http://yoursite.com/tags/iOS-开发文档/"}]}]}