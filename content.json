{"meta":{"title":"王轶涵","subtitle":null,"description":"每个人都会累，没人能为你承担所有的伤悲和疲惫，所以人总有那么一段时间要学会自己长大。","author":"Eric Wang","url":"http://yoursite.com"},"pages":[{"title":"分类","date":"2018-11-08T02:44:13.000Z","updated":"2018-11-08T05:22:29.968Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":"iOS开发"},{"title":"标签","date":"2018-11-08T02:43:58.000Z","updated":"2018-11-08T02:46:43.913Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"关于MobileGestalt.c:890: MGIsDeviceOneOfType is not supported on this platform问题的解决","slug":"关于MobileGestalt-c-890-MGIsDeviceOneOfType-is-not-supported-on-this-platform问题的解决","date":"2018-11-14T07:34:52.000Z","updated":"2018-11-14T07:40:37.986Z","comments":true,"path":"2018/11/14/关于MobileGestalt-c-890-MGIsDeviceOneOfType-is-not-supported-on-this-platform问题的解决/","link":"","permalink":"http://yoursite.com/2018/11/14/关于MobileGestalt-c-890-MGIsDeviceOneOfType-is-not-supported-on-this-platform问题的解决/","excerpt":"","text":"首先说一下我遇到这个问题的环境：xcode 10.1，使用的 iPhone8模拟器，demo 就是一个新创建的空项目。在项目刚启动控制台就输出了“MobileGestalt.c:890: MGIsDeviceOneOfType is not supported on this platform”。虽然不影响项目的运行，但是摆在那里让人很不舒适。找了一些帖子看了看，没有明确的说法。虽然没有详细的原理说明，但是解决方案很简单，就是换一个模拟器。我换成了 xs max 后就没有这个警告了。后来又尝试了几个模拟器，发现之后新出的几款 iPhone 模拟器上不会报这个日志。日后如果能弄清原因会在更新这个问题。","categories":[{"name":"iOS开发","slug":"iOS开发","permalink":"http://yoursite.com/categories/iOS开发/"}],"tags":[{"name":"iOS 开发中遇到的问题","slug":"iOS-开发中遇到的问题","permalink":"http://yoursite.com/tags/iOS-开发中遇到的问题/"}]},{"title":"实用 xcconfig 文件配置你的 iOS 环境","slug":"实用-xcconfig-文件配置你的-iOS-环境","date":"2018-11-08T05:20:54.000Z","updated":"2018-11-15T02:09:22.829Z","comments":true,"path":"2018/11/08/实用-xcconfig-文件配置你的-iOS-环境/","link":"","permalink":"http://yoursite.com/2018/11/08/实用-xcconfig-文件配置你的-iOS-环境/","excerpt":"","text":"首先声明：此文翻译了“Let’s Set Up Your iOS Environments”，并在其基础上结合自己的实践总结而成。如果有什么问题，请联系我。 通常我们在开发中，会遇到多种环境切来切去的情况。这些环境可能包含了开发、测试、生产环境等，每个环境下有对应的服务器地址以及各种key等。很多人是使用宏定义结合注释来进行切换。这样使用起来很不方便，主要还容易出错。如果上线的 app 居然是用的是某个开发的 key，那时候你就可以准备跑路了。为了能够安全愉快进行开发，我们有必要将这种危险的，但是没有技术的活一次性搞定，那么可以使用 xcconfig 文件将这些环境进行分离管理，减少人为犯错的几率。 .xcconfig 文件是一种对项目进行配置的文件，默认会有 debug 和 release 两种。但是我们的环境可不止这两种的，这里我们定义三种环境Development, Staging and Production。每一种环境都包含有 debug 和 release。 创建 configurations在 xcode 的导航区选择项目文件，注意不是 target。然后再 info 的 tab 中可以找到 configurations 项 此时我们需要六个 configuration，分别是 Debug (Development) Debug (Staging) Debug (Production) Release (Development) Release (Staging) Release (Production) Schemes每一个 xcode 项目中至少包含了一个 以项目为名称的 scheme。scheme 包含了一组编译、运行、测试以及打包的配置信息。我们可以使用 scheme 并结合 configurations 来对环境进行区分在 xcode 的顶部的工具栏上，点击 manage schemes。 在 scheme manager 中我们可以看到 schemes 列表。我们选中当前项目名称的 scheme，在点击下面齿轮选择 duplicate。 我们新建一个Development scheme。要确保每一个 action 中对应正确的 configuration 我们在创建一个 Staging scheme。原来的默认的 scheme 设置为 production 环境的 scheme。注意新建的 scheme 一定要勾选 shared 选项，否则其他组员是没有办法使用的 创建 xcconfig files我们在 xcode 中创建一个新的文件如下图，命名为Development。注意不要勾选 targets。如果勾选了 target，name 就会把这个文件编译到项目包里面。 重复上面的操作，创建 Staging和 Production 在 xcconfig 中我们定义几个键值对，例如 ROOT_URL, API_KEY , APP_NAME and BUNDLE_IDENTIFIER。当我们选用不同的环境进行编译运行的时候，会根据对应的 xcconfig 文件进行显示。 Development12345678910// Development.xcconfig// Server URLROOT_URL = http:/$()/localhost:3000// KeysAPI_KEY = 783u9djd8a_hkzos7jd803001nd// App SettingsAPP_NAME = MyTestApp (dev)APP_BUNDLE_ID = com.company.dev Staging 12345678910// Staging.xcconfig// Server URLROOT_URL = https:/$()/www.company.com// KeysAPI_KEY = 89dhdyd93380dkqmoe_hd830dhq// App SettingsAPP_NAME = MyTestApp (staging)APP_BUNDLE_ID = com.company.staging Production 12345678910// Production.xcconfig// Server URLROOT_URL = https:/$()/www.company.com// KeysAPI_KEY = 9ud0930djd_md9zdjdko3830lb0d// App SettingsAPP_NAME = MyTestAppAPP_BUNDLE_ID = com.company.MyTestApp 给 Configurations 设置 xcconfig 文件让我们重新回到项目的 info 选项中，点击 configuration 的箭头，进行如下图的配置。注意不要配错。 注意，如果你的项目此前使用了 cocoapods 的话，你需要进行如下的步骤，否则会报错 删除原有的.xcworkspace文件 删除 podfile.lock 文件和 pods 文件夹 重新执行 pod install此时终端回报警告，此时打开新的xcworkspace文件，在 xcconfig 中导入 pod 中对应的 xcconfig 文件，#include “Pods/Target Support Files/Pods-MyTestApp/Pods-MyTestApp.release.xcconfig”。每一个 xcconfig 中应该是导入两个文件，即一个 debug 和一个 release 配置 info.plist 文件在 项目的 info.plist中配置刚才输入的配置属性，如APP_NAME 和 APP_BUNDLE_ID. 遇到的问题当项目中使用国际化时，每种语言下对应了一个 app 名称，而每种配置环境下又有一个名字，那么 xcode 就会以国际化的 infoplist 文件为最后的配置依据。这种情况，我也没有找到合适的方法去解决。","categories":[{"name":"iOS开发","slug":"iOS开发","permalink":"http://yoursite.com/categories/iOS开发/"}],"tags":[{"name":"iOS 开发环境","slug":"iOS-开发环境","permalink":"http://yoursite.com/tags/iOS-开发环境/"}]},{"title":"使用 next 主题设置侧边栏不起效果的解决方法","slug":"使用-next-主题设置侧边栏不起效果的解决方法","date":"2018-11-08T03:06:54.000Z","updated":"2018-11-08T03:17:19.827Z","comments":true,"path":"2018/11/08/使用-next-主题设置侧边栏不起效果的解决方法/","link":"","permalink":"http://yoursite.com/2018/11/08/使用-next-主题设置侧边栏不起效果的解决方法/","excerpt":"","text":"当使用 hexo 建立静态博客的时候，大部分人都会接触到 nex 这个主题。next 主题简洁实用，自定义性很高。next 主题中有一个属性是设置侧边栏（sidebar）。在我的实践中发现，设置了 social 这个属性居然不起效果。经过各种查资料发现，next 主题中的主题配置文件对空格要求很严，很多地方少了空格后就会报错。我经过仔细的比对，的确我在设置 social的时候只是将作者的注释打开，并没有注意空格的问题。下面是我修改前后的两份代码。大家日后遇到 next 主题设置不起效果的问题，可以先从这里入手。 出问题的格式123social:Google: https://plus.google.com/yourname || googleTwitter: https://twitter.com/yourname || twitter 正常的格式123social: Google: https://plus.google.com/yourname || google Twitter: https://twitter.com/yourname || twitter","categories":[{"name":"其他技巧","slug":"其他技巧","permalink":"http://yoursite.com/categories/其他技巧/"}],"tags":[]},{"title":"解决 xcode 报compress PNG files error错误","slug":"解决-xcode-报compress-PNG-files-error错误","date":"2018-11-05T03:09:47.000Z","updated":"2018-11-05T03:11:06.443Z","comments":true,"path":"2018/11/05/解决-xcode-报compress-PNG-files-error错误/","link":"","permalink":"http://yoursite.com/2018/11/05/解决-xcode-报compress-PNG-files-error错误/","excerpt":"","text":"出现这个错误提示,解决办法:在build setting中搜png到,然后两个选项修改BOOL值为NO,即可运行","categories":[{"name":"iOS开发","slug":"iOS开发","permalink":"http://yoursite.com/categories/iOS开发/"}],"tags":[{"name":"iOS 开发中遇到的问题","slug":"iOS-开发中遇到的问题","permalink":"http://yoursite.com/tags/iOS-开发中遇到的问题/"}]},{"title":"Xcode 10 Multiple commands produce 报错解决","slug":"Xcode-10-Multiple-commands-produce-报错解决","date":"2018-11-05T02:48:51.000Z","updated":"2018-11-05T03:05:57.133Z","comments":true,"path":"2018/11/05/Xcode-10-Multiple-commands-produce-报错解决/","link":"","permalink":"http://yoursite.com/2018/11/05/Xcode-10-Multiple-commands-produce-报错解决/","excerpt":"","text":"用Xcode10跑之前的项目，也就报了一种类型的错误：Multiple commands produce。这个的原因是项目中使用第三方库，里面有README.md，README.txt，LICENSE，Info.plist，图片文件之类的，而且是不止一个库中有，重复的这些文件，导致的报错。解决方案（如图）：找到对应得第三方库的 target &gt; Build phase &gt; Copy Bundle Resource/Compile Sources，删掉第三方库中重复的上述文件，然后再 clean 一下基本可以解决问题。如果还报错的话，可以将重新添加一下到compile source 文件中。还有时候需要修改xcode的配置暂时解决了编译报错的问题。 xcode–file–Workspace Settings–Build System–legacy Build System","categories":[{"name":"iOS开发","slug":"iOS开发","permalink":"http://yoursite.com/categories/iOS开发/"}],"tags":[{"name":"iOS 开发中遇到的问题","slug":"iOS-开发中遇到的问题","permalink":"http://yoursite.com/tags/iOS-开发中遇到的问题/"}]},{"title":"当提示No such module XXX的解决方法","slug":"当提示No-such-module-XXX的解决方法","date":"2018-10-17T13:30:34.000Z","updated":"2018-11-05T02:53:44.891Z","comments":true,"path":"2018/10/17/当提示No-such-module-XXX的解决方法/","link":"","permalink":"http://yoursite.com/2018/10/17/当提示No-such-module-XXX的解决方法/","excerpt":"","text":"最近升级了 xcode10,拿出了以前的 swift 项目跑了一下,发现所有的使用 pod 管理的库都会提示”No such module XXX”的错误.解决办法是:在项目的 build phases 中的 link binary with libraries 将 pods_项目名字.framework 删除掉,然后再重新添加","categories":[{"name":"iOS开发","slug":"iOS开发","permalink":"http://yoursite.com/categories/iOS开发/"}],"tags":[{"name":"iOS 开发中遇到的问题","slug":"iOS-开发中遇到的问题","permalink":"http://yoursite.com/tags/iOS-开发中遇到的问题/"}]},{"title":"使用 Fastlane 对 iOS 项目持续集成方案研究","slug":"使用-Fastlane-对-iOS-项目持续集成方案研究","date":"2017-11-14T02:15:39.000Z","updated":"2018-11-19T02:49:43.221Z","comments":true,"path":"2017/11/14/使用-Fastlane-对-iOS-项目持续集成方案研究/","link":"","permalink":"http://yoursite.com/2017/11/14/使用-Fastlane-对-iOS-项目持续集成方案研究/","excerpt":"","text":"‘懒人推动世界发展’这句话的确很有道理。正是人们为了减轻负担，会不停的研究新的技术、新的方法。这一点在程序员上更为明显。在这一行做久了会发现很多的工作都是在机械的重复，比如打包、发包测试、再打包等，聪明的人会发明各种节省时间的技术来降低自己的工作强度。记得公众号上有篇文章是说一个程序员利用脚本将一个星期的工作在一天就完成了，那么这种做法算不算消极怠工。我认为这种做法应该极力推荐，节省的时间可以做更加有意义的事情。但是每人的技术实力不同，有人就能想到省时省力的方法，有人只能机械重复。可能此时的你就是那个想“偷懒”的人吧。 我使用这种自动化打包是因为有一天突然知道了这种方法后才恍然大悟，“原来还有这种操作”，我是属于没有见识的人了。在日常开发中经常要打各种环境的包，比如开发时要打开发的 debug 或是 release 包来自测。突然产品要线上的包，你就给他切环境打正式包。提测也是测试环境和开发环境来回切换。这么一些操作势必会导致纰漏，更何况你的项目中如果使用的是手动切换环境的话，那就呵呵吧。每次发包，你是不是都要检查好多遍啊。不小心出现了失误，那么就准备删库跑路吧！ 如果你也有上述困扰，那么这篇文章可以帮助你一些。配置安装时候会遇到各种奇奇怪怪的问题，不要着急，先反复检查你是否根据教程完整来操作。操作和配置没有问题的话，请先保存后重新启动 Mac。如果解决不了请先 google 或是 Stack Overflow 上找找看。请相信：解决办法总是比问题多的。 言归正传，此次分享的是 fastlane 的安装和操作教程。我演示的环境是 MacBook Pro 2015年13英寸版（证明我很穷），macOS 10.14.1，终端使用的 iterm。ruby 版本2.5.0p0。gem版本2.7.8。 Fastlane(官网地址）），一套ruby编写的持续集成工具集。通过Fastlane可以实现自动打包、发布、截取app图片等工作，而Fastlane可以执行通过ruby代码或者Fastlane提供的一些工具编写的脚本来实现这些工作。以下皆以打包发布到蒲公英为例，因为蒲公英为开发者提供了Fastlane的蒲公英插件，允许开发者通过Fastlane上传ipa包到蒲公英。 ## Ruby环境 因为Fastlane是ruby编写的，所以我们首先保证电脑的ruby环境有正确安装，打开终端，输入如下命令来查看你电脑上ruby版本。 1ruby -v 尽量保持在最新的版本。因为我在第一次安装的时候，就遇到了一个很棘手的问题就是由于 ruby 版本不对导致的。这里报了错误“RubyGems is not listed as your Gem source You can run……”，可是我明明已经将我的 Gem 源改了啊，可是一直不生效。这个问题困扰了我小半天。关于 Xcode命令行工具ruby 安装好后安装Xcode命令行工具，因为编译、打包等操作，虽然是Fastlane帮我们做的，但本质上还是通过Xcode中的构建工具来完成的。在终端中运行如下命令，则会安装Xcode命令行工具1xcode-select --install 安装 Fastlane这里有两种安装途径 使用RubyGemssudo gem install fastlane -NV，会要求输入电脑密码 使用Homebrewbrew cask install fastlane个人推荐使用第一种方式，因为我使用 Homebrew 安装后会出现奇奇怪怪的问题。即使使用第一种方法，也会遇到问题。例如12ERROR: While executing gem ... (TypeError) no implicit conversion of nil into String 这个需要更新 gem 的版本，然后再次安装 fastlane。 12ERROR: While executing gem ... (Gem::FilePermissionError) You don&apos;t have write permissions for the /usr/bin directory. 如果是这种错误请使用如下命令安装1sudo gem install -n /usr/local/bin fastlane 验证 fastlane 安装,在终端上看一看安装信息中是否有红色的错误信息，在使用下面的命令1fastlane --version 为项目初始化 Fastlane截止到此处 fastlane 的部署工作结束，接下来需要 使用终端cd 到你的项目目录中，也就是项目的.xcodeproj文件所在位置。然后执行Fastlane初始化命令1fastlane init 执行命令后会提示 这四个选型分别是 自动截屏。这个功能能帮我们自动截取APP中的截图，并添加手机边框（如果需要的话），我们这里不选择这个选项，因为我们的项目已经有图片了，不需要这里截屏。 自动发布beta版本用于TestFlight，如果大家有对TestFlight不了解的，可以参考王巍写的这篇文章 自动的App Store发布包。我们的目标是要提交审核到APP Store，按道理应该选这个，但这里我们先不选，因为选择了以后会需要输入用户名密码，以及下载meta信息，需要花费一定时间，这些数据我们可以后期进行配置。 手动设置选择第四个后一路回车即可，会看到生成了一个fastlane目录，该目录下包含了Appfile和Fastfile。还有一个 Gemfile文件 选好了上面的选项后回车，会出现一个“bundle update…”。这里如果一直卡在bundle update，那应该就是被墙了，这时候来到项目目录下，找到Gemfile，打开Gemfile将里面的内容修改为如下：123#source &quot;https://rubygems.org&quot;source &quot;https://ruby.taobao.org&quot;gem &quot;fastlane&quot; 理论上，这里项目的 source设置会覆盖你的 gem source 的设置。但是我了减少麻烦将这个 source 和 gem source 设置统一最好。如果安装信息中没有红色的报警的话就差不多成功了。如果你在初始化项目后出现错误，建议将项目中的 fastlane 的相关文件删除后，重新初始化 安装蒲公英插件1fastlane add_plugin pgyer 安装成功后后会有提示。这里有个题外话，一定要找个网速好的地方来配置。不要像我一样被公司的网坑 Fastfile 文件接下来就是书写一些脚本来执行我们需要的动作了，fastlane 是以 lane 为单位去执行一个自动化任务，每一个 lane 又是由一系列的 action 组成。使用编辑器打开项目的 faslane 目录中的 fastfile 文件。lane：custom_lane，代表了一个叫custom_lane的任务，后面的do，则表示需要执行的操作。由于我的功力比较浅，所以这里贴一段别人写的代码。可以根据注释来进行修改12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364platform :ios do #指定持续集成对象的平台名称lane :dev do|options| #给lane命名branch = options[:branch]#这里我们项目为了区分线上环境和测试环境，而做了两个target#关于target区分环境的方法，可以参考我同事的简书文章https://www.jianshu.com/p/23cc84d40423#下面代码通过在终端输入1或者其他数字来选择要打包的target#puts是ruby中的输出，gets为获取终端中输入的文字，gets需要指定STDIN包中的gets方法，否则会识别为其他包中的gets方法，具体为什么我也不知道puts &quot;请选择要打的scheme：（1：项目Target1，else: 项目Target2）&quot; scheme = STDIN.gets# 通过判断输入内容，来区分一些打包信息，1后面加\\n是因为在终端输入1再敲回车的时候scheme就包含了回车的内容，所以scheme == &quot;1\\n&quot;if scheme == &quot;1\\n&quot; #项目中target的名称，以QQ为例，如果我的target叫QQ，则下面填写QQ，如果是wechat，就填wechat schemeName = &quot;项目Target1&quot;#打包的用途，也就是app-store, package, ad-hoc, enterprise, development这几个中的一个，这里我们项目的target1用的是公司帐号，打的是开发包 export_method = &quot;development&quot; else schemeName = &quot;项目Target2&quot;#这里我们项目的target2用的是企业帐号，打的是企业包 export_method = &quot;enterprise&quot; end#从蒲公英平台拿到的api_key和user_key，下面我会讲怎么拿到这两个key，存在下面两个变量中api_key = &quot;xxxxxxxxxxxxxxxxxxx&quot;user_key = &quot;xxxxxxxxxxxxxxxxxxx&quot;#输入蒲公英上传ipa包后输入的版本描述信息puts &quot;请输入版本描述：&quot;desc = STDIN.getsputs &quot;开始打包 #&#123;schemeName&#125;&quot;# 开始打包gym(#指定scheme的名字scheme: &quot;#&#123;schemeName&#125;&quot;,#输出的ipa名称output_name:&quot;#&#123;schemeName&#125;&quot;,# 是否清空以前的编译信息 true：是clean:true,# 指定打包方式，Release 或者 Debugconfiguration:&quot;Release&quot;,# 指定打包所使用的输出方式，目前支持app-store, package, ad-hoc, enterprise, developmentexport_method:&quot;#&#123;export_method&#125;&quot;,# 指定输出文件夹，这里会保存我们最后生成的ipa文件，也就是存到了我们上面提到的fastlane文件夹中的build文件夹中output_directory:&quot;./fastlane/build&quot;,)puts &quot;开始上传到蒲公英&quot;#开始上传ipa到蒲公英，这里用的是蒲公英提供的插件#update_description代表更新信息，password代表安装密码pgyer(update_description: &quot;#&#123;desc&#125;&quot;, api_key: &quot;#&#123;api_key&#125;&quot;, user_key: &quot;#&#123;user_key&#125;&quot;, password: &quot;1111&quot;, install_type: &quot;2&quot;)#在上传完ipa后，打开ipa的存放文件夹，起到提示上传完成的作用system &quot;open ../fastlane/build&quot;endend 执行脚本cd到项目目录，输入如下命令来执行我们自己定义的lane，格式如下fastlane+脚本第一行中的platform名+脚本第二行中的lane名：1fastlane ios dev 如果成功会出现下面的界面蒲公英上这里 build 号码会自动增加的，不需要你手动去设置了。但是也会出现犹如我遇到的错误,这个错误很弱智了。就是我认为我已经cd 到项目中了，但是实际没有。所以会提示找不到相应的路径也会遇到其他问题 遇到问题 在修改 fastfile 时候，注意格式。比如说空格 1234567891011lane :production do|options|这里不能多空格，也不能少空格，否则会报错[10:43:38]: 103: #部署生产环境打包[10:43:38]: 104: desc &quot;进行生产环境打包&quot;[10:43:38]: =&gt; 105: lane : production do|options|[10:43:38]: 106: branch = options[:branch][10:43:38]: 107: schemeName = &quot;Buri&quot;[!] Syntax error in your Fastfile on line 105: Fastfile:105: syntax error, unexpected &apos;:&apos;, expecting keyword_endlane : production do|options| ^Fastfile:147: syntax error, unexpected keyword_end, expecting end-of-input 证书错误，这个问题是我还没有企业证书，就使用了“enterprise”去打包，结果报错了 123456789101112131415Looks like fastlane ran into a build/archive error with your project[10:46:43]: It&apos;s hard to tell what&apos;s causing the error, so we wrote some guides on how[10:46:43]: to troubleshoot build and signing issues: https://docs.fastlane.tools/codesigning/getting-started/[10:46:43]: Before submitting an issue on GitHub, please follow the guide above and make[10:46:43]: sure your project is set up correctly.[10:46:43]: fastlane uses `xcodebuild` commands to generate your binary, you can see the[10:46:43]: the full commands printed out in yellow in the above log.[10:46:43]: Make sure to inspect the output above, as usually you&apos;ll find more error information there[10:46:43]:[10:46:43]: Looks like no provisioning profile mapping was provided[10:46:43]: Please check the complete output, in particular the very top[10:46:43]: and see if you can find more information. You can also run fastlane[10:46:43]: with the `--verbose` flag.[10:46:43]: Alternatively you can provide the provisioning profile mapping manually[10:46:43]: https://docs.fastlane.tools/codesigning/xcode-project/#xcode-9-and-up 当项目是Multi-Target 时候怎么使用 fastlane参考文章使用 Fastlane 对项目继续集成iOS自动化打包发布（Jenkins + Fastlane + GitLab + 蒲公英）","categories":[{"name":"iOS开发","slug":"iOS开发","permalink":"http://yoursite.com/categories/iOS开发/"}],"tags":[{"name":"iOS 开发环境","slug":"iOS-开发环境","permalink":"http://yoursite.com/tags/iOS-开发环境/"}]},{"title":"iOS Coding Style Guide","slug":"iOS-Coding-Style-Guide","date":"2017-11-02T05:17:13.000Z","updated":"2018-11-05T02:53:29.701Z","comments":true,"path":"2017/11/02/iOS-Coding-Style-Guide/","link":"","permalink":"http://yoursite.com/2017/11/02/iOS-Coding-Style-Guide/","excerpt":"","text":"语言命名使用美式英语,注释可以使用中文 推荐写法:1UIColor *myColor = [UIColor whiteColor]; 不推荐写法:1UIColor *myColour = [UIColor whiteColour]; 代码结构使用 #pragma mark -将类中的方法进行分组123456789101112131415161718192021222324252627282930313233#pragma mark - Private Functions//code...//上空一行//下空两行#pragma mark - Action functions//code...//上空一行//下空两行#pragma mark - Request functions//code...//上空一行//下空两行#pragma mark - xxxDataSource//code...//上空一行//下空两行#pragma mark - xxxDelegate//code...//上空一行//下空两行 间距 代码缩进为2.在xcode的偏好设置中设置，不要使用 tab 键来进行缩进 方法的大括号(包括if/else/switch/while )需要和声明在同一行,而不是重新起一行，但是在新的一行中关闭 推荐写法:12345if (user.isHappy)&#123; //Do something&#125; else &#123; //Do something else&#125; 不推荐写法:1234567if (user.isHappy)&#123; //Do something&#125;else &#123; //Do something else&#125; 每一个方法之间空一行作为间隔 应该避免冒号分隔的方法的对齐方式 推荐写法 123456// blocks are easily readable[UIView animateWithDuration:1.0 animations:^&#123; // something&#125; completion:^(BOOL finished) &#123; // something&#125;]; 不推荐写法: 12345678// colon-aligning makes the block indentation hard to read[UIView animateWithDuration:1.0 animations:^&#123; // something &#125; completion:^(BOOL finished) &#123; // something &#125;]; 注释注释是用来解释这么做的原因.任何的注释必须是最新的.没用的注释请删除避免大段的注释.代码尽量写的具有解释性 方法注释使用如下格式123456/**方法描述@param 参数1描述@param 参数2描述 */ 命名推荐使用长的,可描述性的方法名和变量名称给一个对象命名时建议采用修饰+类型的方式 推荐写法: 12UIButton *settingsButton;UILabel *titleLabel //表示标题的label, 是UILabel类型 不推荐写法: 1UIButton *setBut; 类名和常量名称前面使用两个或是三个字母的前缀,避免和系统的冲突.前缀使用大写常量的名称使用大驼峰命名法,为了易于阅读,需要在前缀上添加相关联的类名对于BOOL类型, 应加上is前缀, 比如- (BOOL)isEqualToString:(NSString *)aString 推荐写法: 1static NSTimeInterval const RWTTutorialViewControllerNavigationFadeAnimationDuration = 0.3; 不推荐写法: 1static NSTimeInterval const fadetime = 1.7; 属性的名称使用小驼峰命名法 推荐写法: 1@property (strong, nonatomic) NSString *descriptiveVariableName; 不推荐写法: 1id varnm; 下划线声明实例变量时必须采用 _ 下划线作为变量名前缀当使用的是属性,推荐使用self. ，本地的局部变量不要使用下划线 方法在方法名中,在(-/+)号之后有一个空格,参数之间需要添加一个空格使用小写字母开头，后面嵌套连接的字母使用大写开头在写Category Method的时候, 必须采用前缀名_ 后连接对应方法名的方式来进行添加，前缀名使用大写 在方法名中尽量不要使用and连接参数对于采取动作行为的方法,使用动词开头,但是不要直接使用 do或者does 推荐写法:1234- (void)setExampleText:(NSString *)text image:(UIImage *)image;- (void)sendAction:(SEL)aSelector to:(id)anObject forAllCells:(BOOL)flag;- (id)viewWithTag:(NSInteger)tag;- (instancetype)initWithWidth:(CGFloat)width height:(CGFloat)height; 不推荐写法: 12345-(void)setT:(NSString *)text i:(UIImage *)image;- (void)sendAction:(SEL)aSelector :(id)anObject :(BOOL)flag;- (id)taggedView:(NSInteger)tag;- (instancetype)initWithWidth:(CGFloat)width andHeight:(CGFloat)height;- (instancetype)initWith:(int)width and:(int)height; // Never do this. 变量变量的命名要尽量可以描述用途.除了在for循环中可以使用单字母的变量,其他情况不能使用单字母变量 推荐写法: 12345@interface RWTTutorial : NSObject@property (strong, nonatomic) NSString *tutorialName;@end 不推荐写法: 123@interface RWTTutorial : NSObject &#123; NSString *tutorialName;&#125; 属性修饰符在声明属性的时候,属性的修饰符优先显示内存管理类,然后是读写. 推荐写法: 12@property (weak, nonatomic) IBOutlet UIView *containerView;@property (strong, nonatomic) NSString *tutorialName; 不推荐写法: 12@property (nonatomic, weak) IBOutlet UIView *containerView;@property (nonatomic) NSString *tutorialName; 如果属性具有可变副本(例如NSString),属性应该使用copy替代strong 推荐写法: 1@property (copy, nonatomic) NSString *tutorialName; 不推荐写法: 1@property (strong, nonatomic) NSString *tutorialName; Block规范 调用block时需要对block判空。 注意block潜在的引用循环。 常量 常量使用static声明,尽量不使用#define 通知的名字和字典的key，应该使用字符串常量来定义 使用const关键字创建浮点型常量const float NSLightGray; 字符串常量应该在.h头文件中暴露给外部，而字符串常量真正的赋值是在.m文件中 推荐写法: 123static NSString * const RWTAboutViewControllerCompanyName = @\"MHP.com\";static CGFloat const RWTImageThumbnailHeight = 50.0; 不推荐写法: 123#define CompanyName @\"MHP.com\"#define thumbnailHeight 2 当使用到了通知的时候,需要将通知名称定义成常量,这样可以避免重复123extern NSString * const OCFooDidBecomeBarNotificationNSString * const OCFooDidBecomeBarNotification = @&quot;OCFooDidBecomeBarNotification&quot;; 枚举类型推荐使用Apple推荐写法推荐写法: 12345typedef NS_ENUM(NSInteger, RWTLeftMenuTopItemType) &#123; RWTLeftMenuTopItemMain, RWTLeftMenuTopItemShows, RWTLeftMenuTopItemSchedule&#125;; 可以在枚举值的后面赋值 123456typedef NS_ENUM(NSInteger, RWTGlobalConstants) &#123; RWTPinSizeMin = 1, RWTPinSizeMax = 5, RWTPinCountMin = 100, RWTPinCountMax = 500,&#125;; 避免使用旧式的k前缀写法不推荐写法: 1234enum GlobalConstants &#123; kMaxPinSize = 5, kMaxPinCount = 500,&#125;; Switch写法推荐写法: 12345678910111213141516switch (condition) &#123; case 1: // ... break; case 2: &#123; // ... // Multi-line example using braces break; &#125; case 3: // ... break; default: // ... break;&#125; 当需要使用穿透时候 12345678910switch (condition) &#123; case 1: // ** fall-through! ** case 2: // code executed for values 1 and 2 break; default: // ... break;&#125; 当switch使用的是枚举值,那么就不需要写default12345678910111213RWTLeftMenuTopItemType menuType = RWTLeftMenuTopItemMain;switch (menuType) &#123; case RWTLeftMenuTopItemMain: // ... break; case RWTLeftMenuTopItemShows: // ... break; case RWTLeftMenuTopItemSchedule: // ... break;&#125; BOOL类型Objective-C 使用 YES 和 NO. 因为 nil 解析成 NO 没有必要判断. 不要使用YES去比较 推荐写法: 12if (someObject) &#123;&#125;if (![anotherObject boolValue]) &#123;&#125; 不推荐写法: 1234if (someObject == nil) &#123;&#125;if ([anotherObject boolValue] == NO) &#123;&#125;if (isAwesome == YES) &#123;&#125; // Never do this.if (isAwesome == true) &#123;&#125; // Never do this. 如果一个bool属性是形容性的,那么需要在属性中添加getter=isXXXX1@property (assign, getter=isEditable) BOOL editable; 条件语句不要嵌套if语句，多个返回语句也是OK。当出现复杂的if条件的时候, 可以把它们分别提取出来赋值到BOOL变量上, 让逻辑更加清晰明了, 约定2个条件以上则需要将其单独提取出来推荐写法:123if (!error) &#123; return success;&#125; 不推荐写法:12if (error) return success; or 1if (!error) return success; 三目运算符对于添加判断,需要添加上括号 推荐写法:12345NSInteger value = 5;result = (value != 0) ? x : y;BOOL isHorizontal = YES;result = isHorizontal ? x : y; 不推荐写法:1result = a &gt; b ? x = c &gt; d ? c : d : y; Init方法Init方法应该遵循Apple生成代码模板的命名规则，返回值使用instancetype&#39;而不是id.dealloc 方法应该放在实现文件的最上面，并且刚好在 @synthesize 和 @dynamic 语句的后面。在任何类中，init 都应该直接放在 dealloc 方法的下面。 1234567- (instancetype)init &#123; self = [super init]; if (self) &#123; // ... &#125; return self;&#125; CGRect 函数当访问CGRect里的x, y, width, 或 height时，应该使用CGGeometry函数而不是直接通过结构体来访问 推荐写法:123456CGRect frame = self.view.frame;CGFloat x = CGRectGetMinX(frame);CGFloat y = CGRectGetMinY(frame);CGFloat width = CGRectGetWidth(frame);CGFloat height = CGRectGetHeight(frame);CGRect frame = CGRectMake(0.0, 0.0, width, height); 不推荐写法:123456CGRect frame = self.view.frame;CGFloat x = frame.origin.x;CGFloat y = frame.origin.y;CGFloat width = frame.size.width;CGFloat height = frame.size.height;CGRect frame = (CGRect)&#123; .origin = CGPointZero, .size = frame.size &#125;; 单例模式单例对象应该使用线程安全模式来创建共享实例。推荐写法:12345678910+ (instancetype)sharedInstance &#123; static id sharedInstance = nil; static dispatch_once_t onceToken; dispatch_once(&amp;onceToken, ^&#123; sharedInstance = [[self alloc] init]; &#125;); return sharedInstance;&#125; Delegate/protocol的书写 命名以触发消息的对象的类名开头，省略类名前缀并且首字母小写 如果调用某个方法是为了通知delegate某个事件”即将”发生或者”已经”发生，则请在方法名称中使用“will”或者“did”这样的助动词 如果调用某个方法是为了要求delegate代表其他对象执行某件事情，我们应该在方法中使用“should”这样的情态动词 调用delegate 的方法时需要进行判断 用optional修饰可以不实现的方法，用required修饰必须实现的方法 Notification 的书写 notification的命名使用全局的NSString字符串进行标识。命名方式如下：[类名] + [Did | Will] + [UniquePartOfName] + Notification 1234NSApplicationDidBecomeActiveNotificationNSWindowDidMiniaturizeNotificationNSTextViewDidChangeSelectionNotificationNSColorPanelColorDidChangeNotification object通常是指发出notification的对象，如果在发送notification的同时要传递一些额外的信息，请使用userInfo，而不是object。 如果某个通知是为了告知外界某个事件”即将”发生或者”已经”发生，则请在通知名称中使用“will”或者“did”这样的助动词 多用字面量语法,少用与之等价的语法推荐写法:1234NSArray *array = @[@\"123\", @\"456\"];NSDictionary *dictionary = @[@\"name\": @\"jersey\", @\"age\": @\"61\"];NSNumber *number = @18;NSString *string = array[0]; 文件引入方式 在 .h 文件中尽量使用 @class 声明文件, 直到 .m 文件中真正需要的时候在使用 @improt 进行引用 @improt 文件顺序: 可以先写引入系统文件, 依次到 Public.h 最后才到我们自己编写的文件。 检查文件,避免引入到没有使用到的文件,发现应及时清除。 可以采用以下的格式进行分割 12345678// Frameworks@import QuartzCore;// Models#import &quot;EWUser.h&quot;// Views#import &quot;EWButton.h&quot; 换行符一行很长的代码应该分成两行代码，下一行用两个空格隔开。一行代码最大宽度为80个字符 Xcode project项目文件夹为了避免文件杂乱，物理文件应该保持和 Xcode 项目文件同步。Xcode 创建的任何组（group）都必须在文件系统有相应的映射。为了更清晰，代码不仅应该按照类型进行分组，也可以根据功能进行分组。 图片资源项目中的图片一致存放到 Assets.xcassets 进行管理. 按模块划分进行管理的，将图片一致保存到原有的模块分组中去,然后每次不需要使用的图片,及时清除, 减少 App 体积。将公用的一些图片资源独立存放。 图片名称: 图片名称可以以模块作为首接 _ 连接其相应功能点。这样在以后查找起来也相对方便。可以根据模块_类别_功能_状态_@2x／@3x.png进行命名如: trade_result_fail 投资,结果页,状态。 discover_activity 发现,活动图片资源包的文件包命名规则是：项目名字＋切图＋作者名字＋日期。文件包要包括：image，效果图＋标注图，切图简单说明（word等文件）。文件包压缩采用.zip格式在image中切图文件和切图命名中：···不要出现大写，···不要有中文、特殊符号以及空格，···字母必须是小写字母，···同类切图大小一致（后续文章单独整理切图方法和常见问题） 三方库管理工具 使用 Cocoapods 统一对第三库进行管理, 建议定时更新到最新版本, 保持版本一致。 避免引入同样功能的第三方库 TODO当在开发某个功能中遇到一些疑难杂症的问题, 但是又由于时间紧急, 来不及把细节做到完美, 如果在不影响当前功能使用的情况下, 为了防止在后面的开发中遗忘掉, 我们必须要在相应的地方添加注释 然后以下面的格式, 接相关问题描述添加进来, 待后面有空闲时间之后回来进行修复完善。1// TODO: messge 其他需要注意的1. 向项目中添加第三方SDK时,只引入必要的文件.例如readme文件以及info.plist文件等不要引用 2. 尽量不要暴露mutable类型的对象在public interface, 建议在.h定义一个Inmutable类型的属性, 然后在.m的get函数里面返回一个内部定义的mutable变量 3. 避免出现魔鬼数字 4. 当发现实现某一方法需要传递的参数太多时, 就预示着你应该聚合成一个model类了 5. 类中使用了通知或是KVO时,注意移除监听 6. 在block中为避免使用weakSelf,还要使用strongSelf 7. NSArray, NSDictionary成员的判空保护.在addObject或insertObject到NSArray或者NSDictionary时最好加一下判空保护, 8. 在每次提交的之前进行检查,有没有warning,以及代码静态分析.例如在视图的生命周期的方法中经常忘记调用[super viewWillAppear.....].还有没有使用过的变量等问题 9. 关于页面布局的方式，对于单一简单的部分视图可以使用xib或是sb，控制器尽量不要使用sb进行构建 10. 如果想要获取window，不要使用view.window获取。请使用[[UIApplication sharedApplication] keyWindow] 11. 在使用到 UIScrollView，UITableView，UICollectionView 的 Class 中，需要在 dealloc 方法里手动的把对应的 delegate, dataSource 置为 nil 代码保护神//// oo0oo// o8888888o// 88” . “88// (| -_- |)// 0\\ = /0// /`—‘\\// .’ \\| |// ‘.// / \\||| : |||// \\// / ||||| -:- |||||- \\// | | \\\\ - /// | |// | \\| ‘’-–/‘’ |_/ |// \\ .-__ ‘-‘ _/-. /// _‘. .’ /–.–\\ . .&#39;___ // .&quot;&quot; &#39;&lt;.__&lt;|&gt;_/_.’ &gt;’ “”.// | | : - \\.;\\ _ /;./ - : | |// \\ \\ _. \\_ __\\ /__ _/ .- / /// =====-.____._ ___/.-`.-‘=====// `=—=’////// ~~~~~~~~~~~//// 佛祖保佑 永无BUG//////","categories":[{"name":"iOS开发","slug":"iOS开发","permalink":"http://yoursite.com/categories/iOS开发/"}],"tags":[{"name":"iOS 开发文档","slug":"iOS-开发文档","permalink":"http://yoursite.com/tags/iOS-开发文档/"}]}]}