{"meta":{"title":"王轶涵","subtitle":null,"description":"每个人都会累，没人能为你承担所有的伤悲和疲惫，所以人总有那么一段时间要学会自己长大。","author":"Eric Wang","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"iOS Coding Style Guide","slug":"iOS-Coding-Style-Guide","date":"2018-11-02T05:17:13.000Z","updated":"2018-11-02T05:21:20.548Z","comments":true,"path":"2018/11/02/iOS-Coding-Style-Guide/","link":"","permalink":"http://yoursite.com/2018/11/02/iOS-Coding-Style-Guide/","excerpt":"","text":"MHP iOS Objective-C代码规范1.0(2018年11月) by Eric Wang语言命名使用美式英语,注释可以使用中文 推荐写法:1UIColor *myColor = [UIColor whiteColor]; 不推荐写法:1UIColor *myColour = [UIColor whiteColour]; 代码结构使用 #pragma mark -将类中的方法进行分组123456789101112131415161718192021222324252627282930313233343536#pragma mark - Lifecycle- (instancetype)init &#123;&#125;- (void)dealloc &#123;&#125;- (void)viewDidLoad &#123;&#125;- (void)viewWillAppear:(BOOL)animated &#123;&#125;- (void)didReceiveMemoryWarning &#123;&#125;#pragma mark - Custom Accessors- (void)setCustomProperty:(id)value &#123;&#125;- (id)customProperty &#123;&#125;#pragma mark - IBActions- (IBAction)submitData:(id)sender &#123;&#125;#pragma mark - Public- (void)publicMethod &#123;&#125;#pragma mark - Private- (void)privateMethod &#123;&#125;#pragma mark - Protocol conformance#pragma mark - UITextFieldDelegate#pragma mark - UITableViewDataSource#pragma mark - UITableViewDelegate#pragma mark - NSCopying- (id)copyWithZone:(NSZone *)zone &#123;&#125;#pragma mark - NSObject- (NSString *)description &#123;&#125; 间距 代码缩进为2.在xcode的偏好设置中设置 方法的大括号(包括if/else/switch/while )需要和声明在同一行,而不是重新起一行 推荐写法:12345if (user.isHappy)&#123; //Do something&#125; else &#123; //Do something else&#125; 不推荐写法:1234567if (user.isHappy)&#123; //Do something&#125;else &#123; //Do something else&#125; 每一个方法之间空一行作为间隔 冒号分隔的方法的对齐方式 推荐写法 123456// blocks are easily readable[UIView animateWithDuration:1.0 animations:^&#123; // something&#125; completion:^(BOOL finished) &#123; // something&#125;]; 不推荐写法: 12345678// colon-aligning makes the block indentation hard to read[UIView animateWithDuration:1.0 animations:^&#123; // something &#125; completion:^(BOOL finished) &#123; // something &#125;]; 注释注释是用来解释这么做的原因.任何的注释必须是最新的.没用的注释请删除避免大段的注释.代码尽量写的具有解释性 方法注释使用如下格式123456/**方法描述@param 参数1描述@param 参数2描述 */ 命名推荐使用长的,可描述性的方法名和变量名称给一个对象命名时建议采用修饰+类型的方式 推荐写法: 12UIButton *settingsButton;UILabel *titleLabel //表示标题的label, 是UILabel类型 不推荐写法: 1UIButton *setBut; 类名和常量名称前面使用两个或是三个字母的前缀,避免和系统的冲突.前缀使用大写常量的名称使用大驼峰命名法,为了易于阅读,需要在前缀上添加相关联的类名对于BOOL类型, 应加上is前缀, 比如- (BOOL)isEqualToString:(NSString *)aString 推荐写法: 1static NSTimeInterval const RWTTutorialViewControllerNavigationFadeAnimationDuration = 0.3; 不推荐写法: 1static NSTimeInterval const fadetime = 1.7; 属性的名称使用小驼峰命名法 推荐写法: 1@property (strong, nonatomic) NSString *descriptiveVariableName; 不推荐写法: 1id varnm; 下划线当使用的是属性,推荐使用self. 成员变量可以使用下划线,本地的局部变量不要使用下划线 方法在方法名中,在(-/+)号之后有一个空格,参数之间需要添加一个空格 在方法名中尽量不要使用and连接参数 推荐写法:1234- (void)setExampleText:(NSString *)text image:(UIImage *)image;- (void)sendAction:(SEL)aSelector to:(id)anObject forAllCells:(BOOL)flag;- (id)viewWithTag:(NSInteger)tag;- (instancetype)initWithWidth:(CGFloat)width height:(CGFloat)height; 不推荐写法: 12345-(void)setT:(NSString *)text i:(UIImage *)image;- (void)sendAction:(SEL)aSelector :(id)anObject :(BOOL)flag;- (id)taggedView:(NSInteger)tag;- (instancetype)initWithWidth:(CGFloat)width andHeight:(CGFloat)height;- (instancetype)initWith:(int)width and:(int)height; // Never do this. 变量变量的命名要尽量可以描述用途.除了在for循环中可以使用单字母的变量,其他情况不能使用单字母变量 推荐写法: 12345@interface RWTTutorial : NSObject@property (strong, nonatomic) NSString *tutorialName;@end 不推荐写法: 123@interface RWTTutorial : NSObject &#123; NSString *tutorialName;&#125; 属性修饰符在声明属性的时候,属性的修饰符优先显示内存管理类,然后是读写. 推荐写法: 12@property (weak, nonatomic) IBOutlet UIView *containerView;@property (strong, nonatomic) NSString *tutorialName; 不推荐写法: 12@property (nonatomic, weak) IBOutlet UIView *containerView;@property (nonatomic) NSString *tutorialName; 如果属性具有可变副本(例如NSString),属性应该使用copy替代strong 推荐写法: 1@property (copy, nonatomic) NSString *tutorialName; 不推荐写法: 1@property (strong, nonatomic) NSString *tutorialName; 常量常量使用static声明,尽量不使用#define 推荐写法: 123static NSString * const RWTAboutViewControllerCompanyName = @\"RayWenderlich.com\";static CGFloat const RWTImageThumbnailHeight = 50.0; 不推荐写法: 123#define CompanyName @\"RayWenderlich.com\"#define thumbnailHeight 2 当使用到了通知的时候,需要将通知名称定义成常量,这样可以避免重复123extern NSString * const OCFooDidBecomeBarNotificationNSString * const OCFooDidBecomeBarNotification = @&quot;OCFooDidBecomeBarNotification&quot;; 枚举类型推荐使用Apple推荐写法推荐写法: 12345typedef NS_ENUM(NSInteger, RWTLeftMenuTopItemType) &#123; RWTLeftMenuTopItemMain, RWTLeftMenuTopItemShows, RWTLeftMenuTopItemSchedule&#125;; 可以在枚举值的后面赋值 123456typedef NS_ENUM(NSInteger, RWTGlobalConstants) &#123; RWTPinSizeMin = 1, RWTPinSizeMax = 5, RWTPinCountMin = 100, RWTPinCountMax = 500,&#125;; 避免使用旧式的k前缀写法不推荐写法: 1234enum GlobalConstants &#123; kMaxPinSize = 5, kMaxPinCount = 500,&#125;; Switch写法推荐写法: 12345678910111213141516switch (condition) &#123; case 1: // ... break; case 2: &#123; // ... // Multi-line example using braces break; &#125; case 3: // ... break; default: // ... break;&#125; 当需要使用穿透时候 12345678910switch (condition) &#123; case 1: // ** fall-through! ** case 2: // code executed for values 1 and 2 break; default: // ... break;&#125; 当switch使用的是枚举值,那么就不需要写default12345678910111213RWTLeftMenuTopItemType menuType = RWTLeftMenuTopItemMain;switch (menuType) &#123; case RWTLeftMenuTopItemMain: // ... break; case RWTLeftMenuTopItemShows: // ... break; case RWTLeftMenuTopItemSchedule: // ... break;&#125; 波尔类型Objective-C 使用 YES 和 NO. 因为 nil 解析成 NO 没有必要判断. 不要使用YES去比较 推荐写法: 12if (someObject) &#123;&#125;if (![anotherObject boolValue]) &#123;&#125; 不推荐写法: 1234if (someObject == nil) &#123;&#125;if ([anotherObject boolValue] == NO) &#123;&#125;if (isAwesome == YES) &#123;&#125; // Never do this.if (isAwesome == true) &#123;&#125; // Never do this. 如果一个bool属性是形容性的,那么需要在属性中添加getter=isXXXX1@property (assign, getter=isEditable) BOOL editable; 条件语句推荐写法:123if (!error) &#123; return success;&#125; 不推荐写法:12if (error) return success; or 1if (!error) return success; 三目运算符对于添加判断,需要添加上括号 推荐写法:12345NSInteger value = 5;result = (value != 0) ? x : y;BOOL isHorizontal = YES;result = isHorizontal ? x : y; 不推荐写法:1result = a &gt; b ? x = c &gt; d ? c : d : y; Init方法返回值使用instancetype&#39;而不是id. 1234567- (instancetype)init &#123; self = [super init]; if (self) &#123; // ... &#125; return self;&#125; Xcode project为了避免文件杂乱，物理文件应该保持和 Xcode 项目文件同步。Xcode 创建的任何组（group）都必须在文件系统有相应的映射。为了更清晰，代码不仅应该按照类型进行分组，也可以根据功能进行分组。 其他需要注意的1.每月对第三方SDK进行更新 2.向项目中添加第三方SDK时,只引入必要的文件.例如readme文件以及info.plist文件等不要引用 3.对第三方的引入严格把关,避免和原项目中文件冲突 4.尽量不要暴露mutable类型的对象在public interface, 建议在.h定义一个Inmutable类型的属性, 然后在.m的get函数里面返回一个内部定义的mutable变量 5.避免出现魔鬼数字 6.当发现实现某一方法需要传递的参数太多时, 就预示着你应该聚合成一个model类了 7.类中使用了通知或是KVO时,注意移除监听 8.在block中为避免使用weakSelf,还要使用strongSelf 9.NSArray, NSDictionary成员的判空保护.在addObject或insertObject到NSArray或者NSDictionary时最好加一下判空保护, 10.在每次提交的之前进行检查,有没有warning,以及代码静态分析.例如在视图的生命周期的方法中经常忘记调用[super viewWillAppear.....].还有没有使用过的变量等问题 11.关于页面布局的方式，对于单一简单的部分视图可以使用xib或是sb，控制器尽量不要使用sb进行构建 代码保护神//// oo0oo// o8888888o// 88” . “88// (| -_- |)// 0\\ = /0// /`—‘\\// .’ \\| |// ‘.// / \\||| : |||// \\// / ||||| -:- |||||- \\// | | \\\\ - /// | |// | \\| ‘’-–/‘’ |_/ |// \\ .-__ ‘-‘ _/-. /// _‘. .’ /–.–\\ . .&#39;___ // .&quot;&quot; &#39;&lt;.__&lt;|&gt;_/_.’ &gt;’ “”.// | | : - \\.;\\ _ /;./ - : | |// \\ \\ _. \\_ __\\ /__ _/ .- / /// =====-.____._ ___/.-`.-‘=====// `=—=’////// ~~~~~~~~~~~//// 佛祖保佑 永无BUG//////","categories":[],"tags":[]},{"title":"当提示No such module XXX的解决方法","slug":"当提示No-such-module-XXX的解决方法","date":"2018-10-17T13:30:34.000Z","updated":"2018-10-17T13:35:51.058Z","comments":true,"path":"2018/10/17/当提示No-such-module-XXX的解决方法/","link":"","permalink":"http://yoursite.com/2018/10/17/当提示No-such-module-XXX的解决方法/","excerpt":"","text":"最近升级了 xcode10,拿出了以前的 swift 项目跑了一下,发现所有的使用 pod 管理的库都会提示”No such module XXX”的错误.解决办法是:在项目的 build phases 中的 link binary with libraries 将 pods_项目名字.framework 删除掉,然后再重新添加","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-10-08T12:23:18.033Z","updated":"2018-10-08T12:23:18.034Z","comments":true,"path":"2018/10/08/hello-world/","link":"","permalink":"http://yoursite.com/2018/10/08/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}